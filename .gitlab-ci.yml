# CI environment

workflow:
  auto_cancel:
    on_new_commit: interruptible

  rules:
    - if: $CI_COMMIT_TITLE =~ /-draft$/ # add '-draft' to 1st commit message line end to ignore pipline
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when : always
    - if: $CI_SPU_ON_JOB_FAILURE == "none"
      auto_cancel:
        on_job_failure: none
    - if: $CI_SPU_ON_JOB_FAILURE != "none"
      auto_cancel:
        on_job_failure: all

stages:
  - analysis
  - build
  - test
  - coverage
  - deploy

## default values

default:
  artifacts:
    expire_in: 2 months
  interruptible: true

variables:
  GIT_SUBMODULE_STRATEGY: none
  GIT_TAG: "v0.0.0"

before_script:
  - hostname
  - whoami

## generic configuraion

### for Linux

.config-linux-tags:
  tags:
    - x86_64
    - linux
    - docker

.config-common-linux:
  extends: .config-linux-tags
  before_script:
    - hostname
    - whoami

## analysis jobs

analysis-headers:
  extends: .config-linux-tags
  stage: analysis
  image: ubuntu:20.04
  artifacts:
    name: analysis-headers
    when: always
    paths:
      - streampu.hpp
  script:
    - ./scripts/generate_streampu_header.sh streampu.hpp
    - diff streampu.hpp include/streampu.hpp

analysis-clang-format:
  extends: .config-common-linux
  stage: analysis
  image: ubuntu:22.04
  script:
    - apt update
    - apt -y install clang-format
    - mkdir original_code
    - cp -r include original_code
    - cp -r src original_code
    - cp -r tests original_code
    - cp -r signal_tracer original_code
    - ./scripts/apply_clang_format.sh
    - mkdir new_code
    - cp -r include new_code
    - cp -r src new_code
    - cp -r tests new_code
    - cp -r signal_tracer new_code
    - diff -r new_code original_code

## build jobs

.build-linux:
  extends: .config-common-linux
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  needs:
    - job: analysis-headers
      artifacts: false
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-macos.sh

.build-linux-gcc:
  extends: .build-linux
  variables:
    CC: 'gcc'
    CXX: 'g++'

build-linux-gcc-x64-avx2:
  extends: .build-linux-gcc
  except:
    - schedules
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_gcc:v9.3.0
  artifacts:
    name: build-linux-gcc-x64-avx2
    paths:
      - build_linux_gcc_x64_avx2
  variables:
    CFLAGS: -Wall -funroll-loops -m64 -mavx2 -mfma
    LFLAGS: -static -static-libgcc -static-libstdc++ -Wl,--whole-archive -lrt -lpthread -Wl,--no-whole-archive
    CMAKE_OPT: -DSPU_JSON_STATS=ON -DSPU_TESTS=ON -DSPU_COMPILE_STATIC_LIB=ON -DSPU_COMPILE_SHARED_LIB=ON -DSPU_STACKTRACE=OFF -DSPU_OVERRIDE_VERSION=$GIT_TAG
    NAME: build_linux_gcc_x64_avx2

build-linux-gcc-coverage-regression:
  extends: .build-linux-gcc
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_coverage
  variables:
    CFLAGS: -Wall -funroll-loops -msse4.2 --coverage
    LFLAGS: --coverage
    CMAKE_OPT: -DSPU_JSON_STATS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG=-O0 -DSPU_TESTS=ON -DSPU_COMPILE_STATIC_LIB=ON -DSPU_COMPILE_SHARED_LIB=ON -DSPU_LINK_HWLOC=ON -DSPU_OVERRIDE_VERSION=$GIT_TAG
  artifacts:
    name: regression-code-coverage-files
    when: always
    paths:
      - build/
      - code_coverage_files/
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-macos.sh
    - ./ci/test-coverage-regression.sh
    - rm -rf build/bin
    - rm -rf build/lib

build-linux-clang:
  extends: .build-linux
  except:
    - schedules
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_clang:v10.0.0
  variables:
    CXX: clang++
    CFLAGS: -Wall -Wno-overloaded-virtual -funroll-loops
    CMAKE_OPT: -DSPU_JSON_STATS=ON -DSPU_TESTS=ON -DSPU_COMPILE_STATIC_LIB=ON -DSPU_COMPILE_SHARED_LIB=ON -DSPU_OVERRIDE_VERSION=$GIT_TAG
    NAME: build_linux_clang 
  artifacts:
    name: build-linux-clang
    paths:
      - build_linux_clang

build-linux-icpc:
  extends: .build-linux
  except:
    - schedules
  image: intel/oneapi-hpckit:2022.2-devel-ubuntu20.04
  variables:
    CXX: icpc
    CFLAGS: -Wall -funroll-loops -march=native -std=c++11
    CMAKE_OPT: -DSPU_JSON_STATS=ON -DSPU_TESTS=ON -DSPU_COMPILE_STATIC_LIB=ON -DSPU_COMPILE_SHARED_LIB=ON -DSPU_OVERRIDE_VERSION=$GIT_TAG
    NAME: build_linux_icpc
  artifacts:
    name: build-linux-icpc
    paths:
      - build_linux_icpc

## test jobs

test-memcheck-regression:
  extends: .config-common-linux
  stage: test
  except:
    - schedules
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_valgrind
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    CXX: g++
    CFLAGS: -Wall -funroll-loops -m64 -mavx2 -mfma
    CMAKE_OPT: -DSPU_JSON_STATS=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSPU_TESTS=ON -DSPU_COMPILE_STATIC_LIB=ON -DSPU_COMPILE_SHARED_LIB=ON -DSPU_LINK_HWLOC=ON -DSPU_OVERRIDE_VERSION=$GIT_TAG
  needs:
    - job: analysis-headers
      artifacts: false
  tags:
    - x86_64
    - avx2
    - linux
    - docker
  artifacts:
    name: test-memcheck-regression
    when: always
    paths:
      - build/Testing
  script:
    - source ./ci/tools/threads.sh
    - ./ci/build-linux-macos.sh
    - ./ci/test-memcheck-regression.sh

## coverage jobs

### compute coverage indicator
coverage-linux:
  extends: .config-common-linux
  stage: coverage
  except:
    - schedules
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_coverage
  needs:
    - job: build-linux-gcc-coverage-regression
      artifacts: true
  coverage: '/.*lines\.*: (\d+.\d+\%)/'
  artifacts:
     name: code-coverage-report
     when: always
     paths:
       - code_coverage_report/
  script:
    - ./ci/coverage-linux.sh

## deploy jobs

pages:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST == "github.com" && $CI_COMMIT_BRANCH == "develop" 
      when: always
    - when: never
  tags:
    - linux
  dependencies:
    - coverage-linux
  allow_failure: true
  script:
    - mv code_coverage_report/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days

## additionnal windows jobs (if win runner(s) available)

include:
  - local: 'ci/windows/ci-windows.yml'
    rules: 
      - if : $CI_SPU_RUNNERS_WINDOWS == "ON"
